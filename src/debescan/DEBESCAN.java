/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package debescan;

/**
 *
 * @author Reba
 */
import algoritma.Clustering;
import algoritma.LoadData;
import algoritma.Normalisasi;
import algoritma.Denormalisasi;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import struktur.Cluster;
import struktur.Point;
import model.Tabel;
import com.google.common.base.Stopwatch;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import javax.swing.tree.TreeSelectionModel;

public class DEBESCAN extends javax.swing.JFrame {

    /**
     * Creates new form DEBESCAN
     */
    private WorkerLoop workerLoop;

    JFileChooser fc;
    File file;

    DefaultMutableTreeNode root = new DefaultMutableTreeNode("Clusters");
    DefaultTreeModel model = new DefaultTreeModel(root);

    Stopwatch stopwatch = Stopwatch.createUnstarted();

    private LoadData load = new LoadData();
    private Point point = new Point();
    private Normalisasi normal = new Normalisasi();
    private Cluster clusters = new Cluster();

    public DEBESCAN() {
        initComponents();
        fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        buttonNormalisasi.setEnabled(false);
        buttonClustering.setEnabled(false);
        labelData.setText("");
        labelCluster.setText("");
        labelNoise.setText("");
        labelSilhouette.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonLoadData = new javax.swing.JButton();
        buttonNormalisasi = new javax.swing.JButton();
        buttonClustering = new javax.swing.JButton();
        confidence = new javax.swing.JSpinner();
        labelData = new javax.swing.JLabel();
        labelCluster = new javax.swing.JLabel();
        labelNoise = new javax.swing.JLabel();
        labelSilhouette = new javax.swing.JLabel();
        labelEps = new javax.swing.JLabel();
        labelMinPts = new javax.swing.JLabel();
        eps = new javax.swing.JSpinner();
        minpts = new javax.swing.JSpinner();
        progBar = new javax.swing.JProgressBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelData = new javax.swing.JTable();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        clusterTree = new javax.swing.JTree();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelHasil = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DBSCAN Clustering");

        buttonLoadData.setText("Load Data");
        buttonLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadDataActionPerformed(evt);
            }
        });

        buttonNormalisasi.setText("Normalisasi");
        buttonNormalisasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNormalisasiActionPerformed(evt);
            }
        });

        buttonClustering.setText("Mulai Clustering");
        buttonClustering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClusteringActionPerformed(evt);
            }
        });

        confidence.setModel(new javax.swing.SpinnerNumberModel(80, 0, 100, 5));
        confidence.setToolTipText("Filter Fitur Confidence");

        labelData.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelData.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Jumlah Data", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        labelData.setMaximumSize(new java.awt.Dimension(80, 80));
        labelData.setMinimumSize(new java.awt.Dimension(80, 80));
        labelData.setPreferredSize(new java.awt.Dimension(80, 80));

        labelCluster.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelCluster.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCluster.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Jumlah Cluster", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N

        labelNoise.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelNoise.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNoise.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Jumlah Noise", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N

        labelSilhouette.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labelSilhouette.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSilhouette.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Silhouette Coefficient", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N

        labelEps.setText("Epsilon");

        labelMinPts.setText("MinPts");

        eps.setModel(new javax.swing.SpinnerNumberModel(0.05d, 0.0d, null, 0.05d));

        minpts.setModel(new javax.swing.SpinnerNumberModel(2, 0, null, 1));

        TabelData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TabelData);

        jTabbedPane1.addTab("Data", jScrollPane1);

        jSplitPane2.setDividerLocation(180);
        jSplitPane2.setDividerSize(2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        clusterTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        clusterTree.setRootVisible(false);
        clusterTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                clusterTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(clusterTree);

        jSplitPane2.setLeftComponent(jScrollPane2);

        tabelHasil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tabelHasil);

        jSplitPane2.setRightComponent(jScrollPane5);

        jTabbedPane1.addTab("Hasil", jSplitPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonLoadData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(buttonClustering, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addComponent(buttonNormalisasi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(labelEps)
                                        .addComponent(labelMinPts))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(minpts)
                                        .addComponent(eps, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNoise, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelCluster, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSilhouette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonLoadData)
                            .addComponent(confidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonNormalisasi)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelEps)
                                    .addComponent(eps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelMinPts)
                                    .addComponent(minpts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(buttonClustering))
                            .addComponent(labelData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCluster, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNoise, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(labelSilhouette, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadDataActionPerformed
        // TODO add your handling code here:
        final String path = "./Data";

        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        chooser.setCurrentDirectory(new File(path));

        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public final static String csv = "csv";

            /*Get the extension of a file.*/
            public String getExtension(java.io.File f) {
                String ext = null;
                String s = f.getName();
                int i = s.lastIndexOf('.');

                if (i > 0 && i < s.length() - 1) {
                    ext = s.substring(i + 1).toLowerCase();
                }
                return ext;
            }

            @Override
            public String getDescription() {
                return "Comma Separated Value (.csv)";
            }

            @Override
            public boolean accept(java.io.File f) {
                if (f.isDirectory()) {
                    return true;
                }

                String extension = getExtension(f);
                if (extension != null) {
                    if (extension.equals(csv)) {
                        return true;
                    } else {
                        return false;
                    }
                }
                return false;
            }
        });

        if (chooser.showDialog(this, "  Open  ")
                == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = chooser.getSelectedFile();
            String filePath = file.toString();

            try {
                double minfilter = 0;
                double maxfilter = 0;
                new Point().clear();
                load.read(filePath, (Integer) confidence.getValue());
                labelData.setText(String.valueOf(point.size()));
                Tabel tabel = new Tabel(point.get());
                TabelData.setModel(tabel);
            } catch (IOException ex) {
                Logger.getLogger(debescan.DEBESCAN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        buttonNormalisasi.setEnabled(true);
        buttonClustering.setEnabled(false);
        labelCluster.setText("");
        labelNoise.setText("");
        labelSilhouette.setText("");
    }//GEN-LAST:event_buttonLoadDataActionPerformed

    private void buttonClusteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClusteringActionPerformed
        // TODO add your handling code here:
        progBar.setIndeterminate(true);
        clusterTree.setModel(model);
        tabelHasil.removeAll();
        clusterTree.clearSelection();
        workerLoop = new WorkerLoop();
        stopwatch.reset();
        stopwatch.start();
        workerLoop.execute();
        buttonClustering.setEnabled(false);
        labelCluster.setText("");
        labelNoise.setText("");
        labelSilhouette.setText("");
    }//GEN-LAST:event_buttonClusteringActionPerformed

    private void buttonNormalisasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNormalisasiActionPerformed
        // TODO add your handling code here:
        normal.minMax(point.get());
        Tabel tabel = new Tabel(point.get());
        TabelData.setModel(tabel);
        buttonNormalisasi.setEnabled(false);
        buttonClustering.setEnabled(true);
    }//GEN-LAST:event_buttonNormalisasiActionPerformed

    private void clusterTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_clusterTreeValueChanged
        // TODO add your handling code here:
        clusterTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) clusterTree.getSelectionPath().getLastPathComponent();
            if (node.getParent().getIndex(node) < clusters.getData().size()) {
                Tabel tabel = new Tabel(clusters.getData().get(node.getParent().getIndex(node)));
                tabelHasil.setModel(tabel);
            } else {
                Tabel tabel = new Tabel(clusters.getN());
                tabelHasil.setModel(tabel);
            }
    }//GEN-LAST:event_clusterTreeValueChanged

    private class WorkerLoop extends SwingWorker<String, Void> {

        @Override
        protected void done() {
            System.out.println("--------------- Selesai ---------------");
            progBar.setIndeterminate(false);
            buttonClustering.setEnabled(true);
        }

        @Override
        protected String doInBackground() throws Exception {
            new Clustering((Double) eps.getValue(), (Integer) minpts.getValue(), point.get());
            labelCluster.setText(String.valueOf(clusters.getSize()));
            labelSilhouette.setText(String.valueOf(clusters.getSilhouette()));
            labelNoise.setText(String.valueOf(clusters.getNoise()));
            for (int i = 0; i < clusters.getData().size(); i++) {
                DefaultMutableTreeNode cluster = new DefaultMutableTreeNode("Cluster " + (i + 1) + " (Size : " + clusters.getData().get(i).size() + ")");
                root.add(cluster);
                for (int j = 0; j < clusters.getData().get(i).size(); j++) {
                    cluster.add(new DefaultMutableTreeNode(clusters.getData().get(i).get(j)));
                }
            }
            if (clusters.getN().size() != 0) {
                DefaultMutableTreeNode noise = new DefaultMutableTreeNode("Noise (Size : " + clusters.getN().size() + ")");
                root.add(noise);
                for (int i = 0; i < clusters.getN().size(); i++) {
                    noise.add(new DefaultMutableTreeNode(clusters.getN().get(i)));
                }
            }
            model.reload();
            stopwatch.stop();
            System.out.println("Elapsed time : " + stopwatch);
            return "\nDone ...";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DEBESCAN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DEBESCAN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DEBESCAN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DEBESCAN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DEBESCAN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelData;
    private javax.swing.JButton buttonClustering;
    private javax.swing.JButton buttonLoadData;
    private javax.swing.JButton buttonNormalisasi;
    private javax.swing.JTree clusterTree;
    private javax.swing.JSpinner confidence;
    private javax.swing.JSpinner eps;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelCluster;
    private javax.swing.JLabel labelData;
    private javax.swing.JLabel labelEps;
    private javax.swing.JLabel labelMinPts;
    private javax.swing.JLabel labelNoise;
    private javax.swing.JLabel labelSilhouette;
    private javax.swing.JSpinner minpts;
    private javax.swing.JProgressBar progBar;
    private javax.swing.JTable tabelHasil;
    // End of variables declaration//GEN-END:variables
}
